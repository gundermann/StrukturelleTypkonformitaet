@misc{easymock,
author = {Henri Tremblay},
title = {easymock-3.0},
  howpublished = "\url{https://github.com/easymock/easymock/releases/tag/easymock-3.0}",
  year = {2015}, 
  note = "[Online; letzter Zugriff 26.06.2021]"
}

@misc{cglib,
author = {Sam Berlin},
title = {cglib 3.3.0},
  howpublished = "\url{https://github.com/cglib/cglib/releases/tag/RELEASE_3_3_0}",
  year = {2019}, 
  note = "[Online; letzter Zugriff 26.06.2021]"
}

@misc{objenesis,
author = {Objenesis Team and all contributors},
title = {Objenesis Release notes},
  howpublished = "\url{http://objenesis.org/notes.html}",
  year = {2021}, 
  note = "[Online; letzter Zugriff 26.06.2021]"
}


@inproceedings{sourcerer,
author = {Bajracharya, Sushil and Ngo, Trung and Linstead, Erik and Dou, Yimeng and Rigor, Paul and Baldi, Pierre and Lopes, Cristina},
title = {Sourcerer: A Search Engine for Open Source Code Supporting Structure-Based Search},
year = {2006},
isbn = {159593491X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1176617.1176671},
doi = {10.1145/1176617.1176671},
abstract = {We present Sourcerer, a search engine for open-source code. Sourcerer extracts fine-grained structural information from the code and stores it in a relational model. This information is used to implement a basic notion of CodeRank and to enable search forms that go beyond conventional keyword-based searches.},
booktitle = {Companion to the 21st ACM SIGPLAN Symposium on Object-Oriented Programming Systems, Languages, and Applications},
pages = {681-682},
numpages = {2},
keywords = {source code search, code rank},
location = {Portland, Oregon, USA},
series = {OOPSLA '06}
}


@inproceedings{Lemos,
author = {Lazzarini Lemos, Otavio Augusto and Bajracharya, Sushil Krishna and Ossher, Joel},
title = {CodeGenie: A Tool for Test-Driven Source Code Search},
year = {2007},
isbn = {9781595938657},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1297846.1297944},
doi = {10.1145/1297846.1297944},
abstract = {We present CodeGenie, a tool that implements a test-driven approach to search and reuse of code available on largescale code repositories. With CodeGenie, developers designtest cases for a desired feature first, similar to Test-driven Development (TDD). However, instead of implementing the feature from scratch, CodeGenie automatically searches foran existing implementation based on information available in the tests. To check the suitability of the candidate results in the local context, each result is automatically woven into the developer's project and tested using the original tests. The developer can then reuse the most suitable result. Later, reused code can also be unwoven from the project as wished. For the code searching and wrapping facilities, CodeGenie relies on Sourcerer, an Internet-scale source code infrastructure that we have developed.},
booktitle = {Companion to the 22nd ACM SIGPLAN Conference on Object-Oriented Programming Systems and Applications Companion},
pages = {917?918},
numpages = {2},
keywords = {test-driven development, source code reuse, test-first, source code search},
location = {Montreal, Quebec, Canada},
series = {OOPSLA '07}
}

@phdthesis{hummel08,
           month = {April},
           title = {Semantic Component Retrieval in Software Engineering},
            note = { },
            year = {2008},
        language = {Englisch},
       publisher = {Universit√§t Mannheim},
          author = {Oliver Hummel},
        keywords = {testgetriebene Wiederverwendung},
             url = {https://madoc.bib.uni-mannheim.de/1883/}
}

@article{moormann,
author = {Zaremski, Amy Moormann and Wing, Jeannette M.},
title = {Signature Matching: A Tool for Using Software Libraries},
year = {1995},
issue_date = {April 1995},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {2},
issn = {1049-331X},
url = {https://doi.org/10.1145/210134.210179},
doi = {10.1145/210134.210179},
abstract = {Signature matching is a method for organizing, navigating through, and retrieving from software libraries. We consider two kinds of software library components?functions and modules?and hence two kinds of matching?function matching and module matching. The signature of a function is simply its type; the signature of a module is a multiset of user-defined types and a multiset of function signatures. For both functions and modules, we consider not just exact match but also various flavors of relaxed match. We describe various applications of signature matching as a tool for using software libraries, inspired by the use of our implementation of a function signature matcher written in Standard ML.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = apr,
pages = {146?170},
numpages = {25},
keywords = {signature matching, software retrieval}
}

